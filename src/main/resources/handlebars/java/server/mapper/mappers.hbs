//
// Mapperユーティリティクラス
//
{{#java this "server/mapper/Mappers" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.mapper;

import java.util.HashMap;
import java.util.Map;
import java.util.function.IntSupplier;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;
import {{global.project.projectName}}.common.logging.Logger;
import {{global.project.projectName}}.server.domain.{{upperLastName}}Content;

@Component
public class Mappers implements BeanPostProcessor {

	private static final Logger LOGGER = Logger.createLogger(Mappers.class);

	private static Mappers instance;

	public static Mappers get() {
		LOGGER.info("Mappers instance ", instance != null);
		return instance;
	}

	{{#each classes}}
	private static final String NAME_{{constName}} = "{{className}}";
	{{/each}}

	{{#each classes}}

	/** {{titleOrName}}のMapper */
	@Autowired
	private {{className}}Mapper {{lowerName}}Mapper;
	{{/each}}

	private Map<String, MapperInterface<?>> mapperMap;

	public Mappers() {
		instance = this;
	}

	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		if (beanName.equals("dataSourceScriptDatabaseInitializer")) {
			resetIds();
		}
		return bean;
	}

	private void resetIds() {
		{{#each surrogateClasses}}
		resetId(NAME_{{constName}}, () -> {{lowerName}}Mapper.listSummary().getMax{{surrogateField.upperName}}());
		{{/each}}
	}

	{{#each classes}}

	/** {{titleOrName}}のMapperを取得する */
	public {{className}}Mapper get{{className}}Mapper() {
		return {{lowerName}}Mapper;
	}
	{{/each}}

	{{#each surrogateClasses}}

	/** {{titleOrName}}のIdを新規発番する */
	public int new{{className}}Id() {
		return generateId(NAME_{{constName}});
	}
	{{/each}}

	private synchronized int resetId(String name, IntSupplier func) {
		{{upperLastName}}Content obj;
		do {
			obj = {{lastName}}Mapper.get(name);
			obj.setSurrogateCount(Math.max(obj.getSurrogateCount(), func.getAsInt()));
		} while(!{{lastName}}Mapper.update(obj));
		return obj.getSurrogateCount();
	}

	private synchronized int generateId(String name) {
		{{upperLastName}}Content obj;
		do {
			obj = {{lastName}}Mapper.get(name);
			obj.setSurrogateCount(obj.getSurrogateCount() + 1);
		} while(!{{lastName}}Mapper.update(obj));
		return obj.getSurrogateCount();
	}

	public MapperInterface<?> getMapperOf(String name) {
		if (mapperMap == null) {
			mapperMap = new HashMap<>();
			{{#each classes}}
			mapperMap.put(NAME_{{constName}}, {{lowerName}}Mapper);
			{{/each}}
		}
		return mapperMap.get(name);
	}

}
{{/java}}
