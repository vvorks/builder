//
// Agentsテンプレート
//
{{#java this "client/agent/" "Agents" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.client.agent;
import java.util.Map;
import java.util.HashMap;
import {{global.project.projectName}}.client.common.ui.DataRecordAgent;

public class Agents {

	private static void addAgent(DataRecordAgent agent) {
		AGENTS.put(agent.getTypeName(), agent);
	}

	private static final Map<String, DataRecordAgent> AGENTS = new HashMap<>();
	static {
		{{#each this.publicClasses}}
		addAgent({{className}}Agent.get());
		{{/each}}
		{{#each this.enums}}
		addAgent({{enumName}}Agent.get());
		{{/each}}
	}

	public static DataRecordAgent get(String name) {
		return AGENTS.get(name);
	}

}
{{/java}}

//
// クラスAgentテンプレート
//
{{#each this.publicClasses}}
{{#java this "client/agent/" className "Agent" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.client.agent;

import java.util.Map;
import java.util.LinkedHashMap;
import {{global.project.projectName}}.client.common.ui.DataRecord;
import {{global.project.projectName}}.client.common.ui.DataRecordAgent;
import {{global.project.projectName}}.shared.common.json.Json;

/**
 * {{titleOrName}}エージェント
 */
public class {{className}}Agent extends DataRecordAgent {

	/** このクラスのシングルトンインスタンス */
	public static final {{className}}Agent INSTANCE = new {{className}}Agent();

	/**
	 * このクラスのシングルトンインスタンスを取得する
	 *
	 * @return このクラスのシングルトンインスタンス
	 */
	public static {{className}}Agent get() {
		return INSTANCE;
	}

	/** プライベートコンストラクタ */
	private {{className}}Agent() {
	}

	@Override
	public String getTypeName() {
		return "{{className}}";
	}

	@Override
	public Json getValue(DataRecord rec, String name) {
		Json data = Json.createObject();
		{{#each keys}}
		data.set{{typeSuffix}}("{{fieldName}}", rec.get{{typeSuffix}}(name + "{{upperName}}"));
		{{/each}}
		return data;
	}

	@Override
	public void setValue(DataRecord rec, String name, Json data) {
		{{#each keys}}
		rec.set{{typeSuffix}}(name + "{{upperName}}", data.get{{typeSuffix}}("{{fieldName}}"));
		{{/each}}
	}

	@Override
	public Json fromParam(Map<String, String> param) {
		Json key = Json.createObject();
		{{#each keys}}
		{{#if stringType}}
		key.setString("{{fieldName}}", param.get("{{fieldName}}"));
		{{else}}
		key.set{{typeSuffix}}("{{fieldName}}", as{{typeSuffix}}(param.get("{{fieldName}}")));
		{{/if}}
		{{/each}}
		return key;
	}

	@Override
	public Map<String, String> toParam(Json data) {
		Map<String, String> map = new LinkedHashMap<>();
		{{#each keys}}
		{{#if stringType}}
		map.put("{{fieldName}}", data.getString("{{fieldName}}"));
		{{else}}
		map.put("{{fieldName}}", toString(data.get{{typeSuffix}}("{{fieldName}}")));
		{{/if}}
		{{/each}}
		return map;
	}

}
{{/java}}
{{/each}}

//
// 列挙Agentテンプレート
//
{{#each this.enums}}
{{#java this "client/agent/" enumName "Agent" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.client.agent;

import java.util.Map;
import {{global.project.projectName}}.client.common.ui.DataRecord;
import {{global.project.projectName}}.client.common.ui.DataRecordAgent;
import {{global.project.projectName}}.shared.common.json.Json;

/**
 * {{titleOrName}}エージェント
 */
public class {{enumName}}Agent extends DataRecordAgent {

	/** このクラスのシングルトンインスタンス */
	public static final {{enumName}}Agent INSTANCE = new {{enumName}}Agent();

	/**
	 * このクラスのシングルトンインスタンスを取得する
	 *
	 * @return このクラスのシングルトンインスタンス
	 */
	public static {{enumName}}Agent get() {
		return INSTANCE;
	}

	/** プライベートコンストラクタ */
	private {{enumName}}Agent() {
	}

	@Override
	public String getTypeName() {
		return "{{enumName}}";
	}

	@Override
	public Json getValue(DataRecord rec, String name) {
		Json data = Json.createObject();
		data.set{{encodeSuffix}}(name, rec.get{{encodeSuffix}}("value"));
		return data;
	}

	@Override
	public void setValue(DataRecord rec, String name, Json data) {
		rec.set{{encodeSuffix}}(name, data.get{{encodeSuffix}}("value"));
	}

	@Override
	public Json fromParam(Map<String, String> param) {
		return null;
	}

	@Override
	public Map<String, String> toParam(Json data) {
		return null;
	}

}
{{/java}}
{{/each}}
