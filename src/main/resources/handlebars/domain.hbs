//
// Contentクラステンプレート
//
{{#each this.classes}}
{{#java this "server/domain/" className "Content" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.domain;

import java.util.Objects;

/**
 * {{titleOrName}}
{{#if description}}
 *
 * {{description}}
{{/if}}
{{#if note}}
 *
 * {{note}}
{{/if}}
 */
public class {{className}}Content {

	{{#each properties}}

	/**
	 * {{titleOrName}}
	{{#if description}}
	 *
	 * {{description}}
	{{/if}}
	{{#if note}}
	 *
	 * {{note}}
	{{/if}}
	 */
	private {{javaType}} {{fieldName}};
	{{/each}}

	{{#each _titleFields}}

	/**
	 * {{titleOrName}}
	 */
	private {{javaType}} {{fieldName}};
	{{/each}}

	/**
	 * 空の{{titleOrName}}を作成する
	 */
	public {{className}}Content() {
	}

	/**
	 * 指定のキー項目を持つ{{titleOrName}}を作成する
	 *
	{{#each keys}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 */
	public {{className}}Content(
		{{#each keys}}
		{{javaType}} {{fieldName}}{{#separator}},{{/separator}}
		{{/each}}
	) {
		{{#each keys}}
		this.{{fieldName}} = {{fieldName}};
		{{/each}}
	}

	{{#each properties}}

	/**
	 * {{titleOrName}}を取得する
	 *
	 * @return {{titleOrName}}
	 */
	public {{javaType}} {{getterName}}() {
		return this.{{fieldName}};
	}

	/**
	 * {{titleOrName}}を設定する
	 *
	 * @param {{fieldName}} 設定する{{titleOrName}}
	 */
	public void {{setterName}}({{javaType}} {{fieldName}}) {
		this.{{fieldName}} = {{fieldName}};
	}
	{{/each}}

	{{#each _titleFields}}

	/**
	 * {{titleOrName}}を取得する
	 *
	 * @return {{titleOrName}}
	 */
	public {{javaType}} {{getterName}}() {
		return this.{{fieldName}};
	}

	/**
	 * {{titleOrName}}を設定する
	 *
	 * @param {{fieldName}} 設定する{{titleOrName}}
	 */
	public void {{setterName}}({{javaType}} {{fieldName}}) {
		this.{{fieldName}} = {{fieldName}};
	}
	{{/each}}

	@Override
	public int hashCode() {
		return Objects.hash(
			{{#each properties}}
			{{fieldName}}{{#separator}},{{/separator}}
			{{/each}}
			);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} else if (obj == null) {
			return false;
		} else if (getClass() != obj.getClass()) {
			return false;
		} else {
			return equals(({{className}}Content) obj);
		}
	}

	private boolean equals({{className}}Content other) {
		return
			{{#each properties}}
			{{#if primitiveOrEnum}}
			this.{{fieldName}} == other.{{fieldName}}{{#separator}} && {{/separator}}
			{{else}}
			Objects.equals(this.{{fieldName}}, other.{{fieldName}}){{#separator}} && {{/separator}}
			{{/if}}
			{{/each}}
			;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{{className}}Content [");
		{{#each properties}}
		sb.append("{{fieldName}}=").append({{fieldName}}){{#separator}}.append(", "){{/separator}};
		{{/each}}
		sb.append("]");
		return sb.toString();
	}

}
{{/java}}
{{/each}}

//
// Subjectクラステンプレート
//
{{#each this.classes}}
{{#java this "server/domain/" className "Subject" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.domain;

import java.util.Objects;

/**
 * {{titleOrName}}の見出し
{{#if description}}
 *
 * {{description}}
{{/if}}
{{#if note}}
 *
 * {{note}}
{{/if}}
 */
public class {{className}}Subject {

	{{#each keys}}

	/**
	 * {{titleOrName}}
	{{#if description}}
	 *
	 * {{description}}
	{{/if}}
	{{#if note}}
	 *
	 * {{note}}
	{{/if}}
	 */
	private {{javaType}} {{fieldName}};
	{{/each}}

	{{#with _titleField}}

	/**
	 * {{titleOrName}}
	 */
	private {{javaType}} {{fieldName}};
	{{/with}}

	/**
	 * 空の{{titleOrName}}の見出しを作成する
	 */
	public {{className}}Subject() {
	}

	/**
	 * 指定のキー項目を持つ{{titleOrName}}の見出しを作成する
	 *
	{{#each keys}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 */
	public {{className}}Subject(
		{{#each keys}}
		{{javaType}} {{fieldName}}{{#separator}},{{/separator}}
		{{/each}}
	) {
		{{#each keys}}
		this.{{fieldName}} = {{fieldName}};
		{{/each}}
	}

	{{#with _titleField}}

	/**
	 * {{titleOrName}}を取得する
	 *
	 * @return {{titleOrName}}
	 */
	public {{javaType}} {{getterName}}() {
		return this.{{fieldName}};
	}

	/**
	 * {{titleOrName}}を設定する
	 *
	 * @param {{fieldName}} 設定する{{titleOrName}}
	 */
	public void {{setterName}}({{javaType}} {{fieldName}}) {
		this.{{fieldName}} = {{fieldName}};
	}
	{{/with}}

	@Override
	public int hashCode() {
		return Objects.hash(
			{{#each keys}}
			{{fieldName}}{{#separator}},{{/separator}}
			{{/each}}
			);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} else if (obj == null) {
			return false;
		} else if (getClass() != obj.getClass()) {
			return false;
		} else {
			return equals(({{className}}Subject) obj);
		}
	}

	private boolean equals({{className}}Subject other) {
		return
			{{#each keys}}
			{{#if primitiveOrEnum}}
			this.{{fieldName}} == other.{{fieldName}}{{#separator}} && {{/separator}}
			{{else}}
			Objects.equals(this.{{fieldName}}, other.{{fieldName}}){{#separator}} && {{/separator}}
			{{/if}}
			{{/each}}
			;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{{className}}Subject [");
		{{#each keys}}
		sb.append("{{fieldName}}=").append({{fieldName}}){{#separator}}.append(", "){{/separator}};
		{{/each}}
		sb.append("]");
		return sb.toString();
	}

}
{{/java}}
{{/each}}

//
// Summaryクラステンプレート
//
{{#each this.classes}}
{{#java this "server/domain/" className "Summary" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.domain;

import java.util.List;
import java.util.Objects;

/**
 * {{titleOrName}}のサマリー情報
 */
public class {{className}}Summary<T> {

	{{#each properties}}

	{{#if needsSum}}
	/** {{titleOrName}}の合計値 */
	private {{calcuratedType}} sum{{upperName}};
	{{/if}}

	{{#if needsAvg}}
	/** {{titleOrName}}の平均値 */
	private {{calcuratedType}} avg{{upperName}};
	{{/if}}

	{{#if needsMax}}
	/** {{titleOrName}}の最大値 */
	private {{calcuratedType}} max{{upperName}};
	{{/if}}

	{{#if needsMin}}
	/** {{titleOrName}}の最小値 */
	private {{calcuratedType}} min{{upperName}};
	{{/if}}
	{{/each}}

	/** 件数 */
	private int count;

	/** （初期）フォーカス位置 */
	private int focus;

	/** オフセット */
	private int offset;

	/** Contentリスト情報 */
	private List<T> contents;

	{{#each properties}}

	{{#if needsSum}}
	/**
	 * {{titleOrName}}の合計値を取得する
	 *
	 * @return {{titleOrName}}の合計値
	 */
	public {{calcuratedType}} getSum{{upperName}}() {
		return sum{{upperName}};
	}

	/**
	 * {{titleOrName}}の合計値を設定する
	 *
	 * @param sum{{upperName}} {{titleOrName}}の合計値
	 */
	public void setSum{{upperName}}({{calcuratedType}} sum{{upperName}}) {
		this.sum{{upperName}} = sum{{upperName}};
	}
	{{/if}}

	{{#if needsAvg}}
	/**
	 * {{titleOrName}}の平均値を取得する
	 *
	 * @return {{titleOrName}}の平均値
	 */
	public {{calcuratedType}} getAvg{{upperName}}() {
		return avg{{upperName}};
	}

	/**
	 * {{titleOrName}}の平均値を設定する
	 *
	 * @param avg{{upperName}} {{titleOrName}}の平均値
	 */
	public void setAvg{{upperName}}({{calcuratedType}} avg{{upperName}}) {
		this.avg{{upperName}} = avg{{upperName}};
	}
	{{/if}}

	{{#if needsMax}}
	/**
	 * {{titleOrName}}の最大値を取得する
	 *
	 * @return {{titleOrName}}の最大値
	 */
	public {{calcuratedType}} getMax{{upperName}}() {
		return max{{upperName}};
	}

	/**
	 * {{titleOrName}}の最大値を設定する
	 *
	 * @param max{{upperName}} {{titleOrName}}の最大値
	 */
	public void setMax{{upperName}}({{calcuratedType}} max{{upperName}}) {
		this.max{{upperName}} = max{{upperName}};
	}
	{{/if}}

	{{#if needsMin}}
	/**
	 * {{titleOrName}}の最小値を取得する
	 *
	 * @return {{titleOrName}}の最小値
	 */
	public {{calcuratedType}} getMin{{upperName}}() {
		return min{{upperName}};
	}

	/**
	 * {{titleOrName}}の最小値を設定する
	 *
	 * @param min{{upperName}} {{titleOrName}}の最小値
	 */
	public void setMin{{upperName}}({{calcuratedType}} min{{upperName}}) {
		this.min{{upperName}} = min{{upperName}};
	}
	{{/if}}
	{{/each}}

	/**
	 * 件数を取得する
	 *
	 * @return 件数
	 */
	public int getCount() {
		return count;
	}

	/**
	 * 件数を設定する
	 *
	 * @param count 件数
	 */
	public void setCount(int count) {
		this.count = count;
	}

	/**
	 * （初期）フォーカス位置を取得する
	 *
	 * @return 件数
	 */
	public int getFocus() {
		return focus;
	}

	/**
	 * （初期）フォーカス位置を設定する
	 *
	 * @param focus （初期）フォーカス位置
	 */
	public void setFocus(int focus) {
		this.focus = focus;
	}

	/**
	 * オフセットを取得する
	 *
	 * @return オフセット
	 */
	public int getOffset() {
		return offset;
	}

	/**
	 * オフセットを設定する
	 *
	 * @param offset オフセット
	 */
	public void setOffset(int offset) {
		this.offset = offset;
	}

	/**
	 * Contentリスト情報を取得する
	 *
	 * @return Contentリスト情報
	 */
	public List<T> getContents() {
		return contents;
	}

	/**
	 * Contentリスト情報を設定する
	 *
	 * @param contents Contentリスト情報
	 */
	public void setContents(List<T> contents) {
		this.contents = contents;
	}

	@Override
	public int hashCode() {
		return Objects.hash(
			{{#each properties}}
			{{#if needsSum}}
			sum{{upperName}},
			{{/if}}
			{{#if needsAvg}}
			avg{{upperName}},
			{{/if}}
			{{#if needsMax}}
			max{{upperName}},
			{{/if}}
			{{#if needsMin}}
			min{{upperName}},
			{{/if}}
			{{/each}}
			count, focus, offset, contents);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} else if (obj == null) {
			return false;
		} else if (getClass() != obj.getClass()) {
			return false;
		} else {
			@SuppressWarnings("unchecked")
			{{className}}Summary<T> other = ({{className}}Summary<T>) obj;
			return equals(other);
		}
	}

	private boolean equals({{className}}Summary<T> other) {
		return
			{{#each properties}}
			{{#if primitiveOrEnum}}
			{{#if needsSum}}
			this.sum{{upperName}} == other.sum{{upperName}} &&
			{{/if}}
			{{#if needsAvg}}
			this.avg{{upperName}} == other.avg{{upperName}} &&
			{{/if}}
			{{#if needsMax}}
			this.max{{upperName}} == other.max{{upperName}} &&
			{{/if}}
			{{#if needsMin}}
			this.min{{upperName}} == other.min{{upperName}} &&
			{{/if}}
			{{else}}
			{{#if needsSum}}
			Objects.equals(this.sum{{upperName}}, other.sum{{upperName}}) &&
			{{/if}}
			{{#if needsAvg}}
			Objects.equals(this.avg{{upperName}}, other.avg{{upperName}}) &&
			{{/if}}
			{{#if needsMax}}
			Objects.equals(this.max{{upperName}}, other.max{{upperName}}) &&
			{{/if}}
			{{#if needsMin}}
			Objects.equals(this.min{{upperName}}, other.min{{upperName}}) &&
			{{/if}}
			{{/if}}
			{{/each}}
			this.count == other.count &&
			this.focus == other.focus &&
			this.offset == other.offset &&
			Objects.equals(this.contents, other.contents);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{{className}}Content [");
		{{#each properties}}
		{{#if needsSum}}
		sb.append("sum{{upperName}}=").append(sum{{upperName}}).append(", ");
		{{/if}}
		{{#if needsAvg}}
		sb.append("avg{{upperName}}=").append(avg{{upperName}}).append(", ");
		{{/if}}
		{{#if needsMax}}
		sb.append("max{{upperName}}=").append(max{{upperName}}).append(", ");
		{{/if}}
		{{#if needsMin}}
		sb.append("min{{upperName}}=").append(min{{upperName}}).append(", ");
		{{/if}}
		{{/each}}
		sb.append("count=").append(count).append(", ");
		sb.append("focus=").append(focus).append(", ");
		sb.append("offset=").append(offset).append(", ");
		sb.append("contents=").append(contents);
		sb.append("]");
		return sb.toString();
	}

}
{{/java}}
{{/each}}

//
// Enumテンプレート
//
{{#each this.enums}}
{{#java this "server/domain/" enumName ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.domain;
import {{global.project.projectName}}.common.lang.Encodable;

/**
 * {{titleOrName}}
{{#if description}}
 *
 * {{description}}
{{/if}}
{{#if note}}
 *
 * {{note}}
{{/if}}
 */
public enum {{enumName}} implements Encodable<{{encodeType}}> {

	{{#each enumValues}}

	/**
	 * {{titleOrName}}
	{{#if description}}
	 *
	 * {{description}}
	{{/if}}
	{{#if note}}
	 *
	 * {{note}}
	{{/if}}
	 */
	{{valueId}}({{code}}){{#separator}},{{/separator}}
	{{/each}}
	;

	/**
	 * 列挙コード
	 */
	private final int code;

	/**
	 * {{enumName}}を作成する
	 *
	 * @param code 列挙コード
	 */
	private {{enumName}}(int code) {
		this.code = code;
	}

	/**
	 * 列挙コードを取得する
	 */
	public int code() {
		return this.code;
	}

	@Override
	public {{encodeType}} encode() {
		{{#if encodeString}}
		return name();
		{{else}}
		return code();
		{{/if}}
	}

	/**
	 * 列挙コードから列挙オブジェクトを取得する
	 */
	public static {{enumName}} valueOf(int value) {
		for ({{enumName}} e : values()) {
			if (e.code() == value) {
				return e;
			}
		}
		return null;
	}

}
{{/java}}
{{/each}}
