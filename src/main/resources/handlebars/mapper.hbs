{{#each this.classes}}
//
// 各クラスのMapperインターフェース(.java)
//
{{#java this "server/mapper/" className "Mapper" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import {{global.project.projectName}}.server.domain.*;

@Mapper
public interface {{className}}Mapper {

	/**
	 * {{titleOrName}}を挿入する
	 *
	 * @param content 挿入する{{titleOrName}}
	 * @return 処理成功の場合、真
	 */
	public boolean insert({{className}}Content content);

	/**
	 * {{titleOrName}}を更新する
	 *
	 * @param content 更新する{{titleOrName}}
	 * @return 処理成功の場合、真
	 */
	public boolean update({{className}}Content content);

	/**
	 * {{titleOrName}}を削除する
	 *
	 * @param content 削除する{{titleOrName}}
	 * @return 処理成功の場合、真
	 */
	public boolean delete({{className}}Content content);

	/**
	 * {{titleOrName}}を取得する
	 *
	{{#each keys}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @return 取得した{{titleOrName}}
	 */
	public {{className}}Content get(
		{{#each keys}}
		@Param("{{fieldName}}") {{javaType}} {{fieldName}}{{#separator}}, {{/separator}}
		{{/each}}
	);

	/**
	 * 全ての{{titleOrName}}のサマリーを取得する
	 *
	 * @return {{titleOrName}}のサマリー
	 */
	public {{className}}Summary listSummary();

	/**
	 * 全ての{{titleOrName}}を取得する
	 *
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{titleOrName}}のリスト
	 */
	public List<{{className}}Content> listContent(
		@Param("offset") int offset,
		@Param("limit") int limit
	);

	{{#each queries}}
	/**
	 * {{titleOrName}}に合致する{{../titleOrName}}のサマリーを取得する
	 *
	 * @return {{../titleOrName}}のサマリー
	 */
	public {{../className}}Summary listIf{{upperName}}Summary();

	/**
	 * {{titleOrName}}に合致する{{../titleOrName}}を取得する
	 *
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{../titleOrName}}のリスト
	 */
	public List<{{../className}}Content> listIf{{upperName}}Content(
		//TODO 条件引数の追加
		@Param("offset") int offset,
		@Param("limit") int limit
	);
	{{/each}}

	{{#if findConditions}}
	/**
	 * 指定した条件に合致する{{titleOrName}}のサマリーを取得する
	 *
	{{#each findConditions}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @return {{titleOrName}}のサマリー
	 */
	public {{className}}Summary findSummary(
		{{#each findConditions}}
		@Param("{{fieldName}}") {{wrapperType}} {{fieldName}}{{#separator}}, {{/separator}}
		{{/each}}
	);

	/**
	 * 指定した条件に合致する{{titleOrName}}を取得する
	 *
	{{#each findConditions}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{titleOrName}}のリスト
	 */
	public List<{{className}}Content> findContent(
		{{#each findConditions}}
		@Param("{{fieldName}}") {{wrapperType}} {{fieldName}},
		{{/each}}
		@Param("offset") int offset,
		@Param("limit") int limit
	);
	{{/if}}

	{{#each refs}}

	/**
	 * {{titleOrName}}を取得する
	 *
	 * @param content {{../titleOrName}}
	 * @return {{titleOrName}}
	 */
	public {{cref.className}}Content get{{upperName}}({{../className}}Content content);
	{{/each}}

	{{#each sets}}

	/**
	 * {{titleOrName}}のサマリーを取得する
	 *
	 * @param content {{../titleOrName}}
	 * @return {{titleOrName}}のサマリー
	 */
	public {{fref.owner.className}}Summary list{{upperName}}Summary(
		@Param("content") {{../className}}Content content
	);

	/**
	 * {{titleOrName}}を取得する
	 *
	 * @param content {{../titleOrName}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{titleOrName}}
	 */
	public List<{{fref.owner.className}}Content> list{{upperName}}Content(
		@Param("content") {{../className}}Content content,
		@Param("offset") int offset,
		@Param("limit") int limit
	);

	{{#each fref.owner.queries}}

	/**
	 * {{titleOrName}}に合致する{{../titleOrName}}のサマリーを取得する
	 *
	 * @param content {{../../titleOrName}}
	 * @return {{../titleOrName}}のサマリー
	 */
	public {{../fref.owner.className}}Summary list{{../upperName}}If{{upperName}}Summary(
		@Param("content") {{../../className}}Content content
	);

	/**
	 * {{titleOrName}}に合致する{{../titleOrName}}を取得する
	 *
	 * @param content {{../../titleOrName}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{../titleOrName}}
	 */
	public List<{{../fref.owner.className}}Content> list{{../upperName}}If{{upperName}}Content(
		@Param("content") {{../../className}}Content content,
		@Param("offset") int offset,
		@Param("limit") int limit
	);
	{{/each}}

	{{#if fref.owner.findConditions}}
	/**
	 * 指定した条件に合致する{{titleOrName}}のサマリーを取得する
	 *
	 * @param content {{../titleOrName}}
	{{#each fref.owner.findConditions}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @return {{titleOrName}}のサマリー
	 */
	public {{fref.owner.className}}Summary find{{upperName}}Summary(
		@Param("content") {{../className}}Content content,
		{{#each fref.owner.findConditions}}
		@Param("{{fieldName}}") {{wrapperType}} {{fieldName}}{{#separator}}, {{/separator}}
		{{/each}}
	);

	/**
	 * 指定した条件に合致する{{titleOrName}}を取得する
	 *
	 * @param content {{../titleOrName}}
	{{#each fref.owner.findConditions}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{titleOrName}}
	 */
	public List<{{fref.owner.className}}Content> find{{upperName}}Content(
		@Param("content") {{../className}}Content content,
		{{#each fref.owner.findConditions}}
		@Param("{{fieldName}}") {{wrapperType}} {{fieldName}},
		{{/each}}
		@Param("offset") int offset,
		@Param("limit") int limit
	);
	{{/if}}
	{{/each}}

}
{{/java}}

//
//各クラスのMapper XML(.xml)
//
{{#java this "server/mapper/" className "Mapper" ".xml"}}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="{{global.project.projectName}}.server.mapper.{{className}}Mapper">

	<insert id="insert" parameterType="{{className}}Content">
		INSERT INTO {{tableName}} (
			{{#each properties}}
			{{columnName}}{{#separator}},{{/separator}}
			{{/each}}
		) VALUES (
			{{#each properties}}
			#{ {{fieldName}} }{{#separator}},{{/separator}}
			{{/each}}
		)
	</insert>

	<update id="update" parameterType="{{className}}Content">
		UPDATE {{tableName}} SET
			{{#each notKeys}}
			{{columnName}} = #{ {{fieldName}} }{{#separator}},{{/separator}}
			{{/each}}
		WHERE
			{{#each keys}}
			{{columnName}} = #{ {{fieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
	</update>

	<delete id="delete" parameterType="{{className}}Content">
		DELETE FROM {{tableName}}
		WHERE
			{{#each keys}}
			{{columnName}} = #{ {{fieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
	</delete>

	<select id="get" resultType="{{className}}Content">
		SELECT
			{{#each properties}}
			{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{tableName}}
		WHERE
			{{#each keys}}
			{{columnName}} = #{ {{fieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
	</select>

	<select id="listSummary" resultType="{{className}}Summary">
		SELECT
			{{#each properties}}
			{{#if needsSum}}
			SUM({{columnName}}) AS "sum{{upperName}}",
			{{/if}}
			{{#if needsAvg}}
			AVG({{columnName}}) AS "avg{{upperName}}",
			{{/if}}
			{{#if needsMax}}
			MAX({{columnName}}) AS "max{{upperName}}",
			{{/if}}
			{{#if needsMin}}
			MIN({{columnName}}) AS "min{{upperName}}",
			{{/if}}
			{{/each}}
			COUNT(*) AS "count"
		FROM
			{{tableName}}
	</select>

	<select id="listContent" resultType="{{className}}Content">
		SELECT
			{{#each properties}}
			{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{tableName}}
		<if test="limit &gt; 0">
			LIMIT #{limit}
		<if test="offset &gt;= 0">
			OFFSET #{offset}
		</if>
		</if>
	</select>

	{{#each queries}}

	<select id="listIf{{upperName}}Summary" resultType="{{../className}}Summary">
		SELECT
			{{#each ../properties}}
			{{#if needsSum}}
			SUM(T1.{{columnName}}) AS "sum{{upperName}}",
			{{/if}}
			{{#if needsAvg}}
			AVG(T1.{{columnName}}) AS "avg{{upperName}}",
			{{/if}}
			{{#if needsMax}}
			MAX(T1.{{columnName}}) AS "max{{upperName}}",
			{{/if}}
			{{#if needsMin}}
			MIN(T1.{{columnName}}) AS "min{{upperName}}",
			{{/if}}
			{{/each}}
			COUNT(*) AS "count"
		FROM
			{{../tableName}} T1
			{{#each joins}}
			LEFT JOIN {{nextClass.tableName}} T{{nextNo}} ON
				{{#each lastField.refKeyFields}}
				T{{../lastNo}}.{{columnName}} = T{{../nextNo}}.{{refKeyColumnName}}{{#separator}} AND {{/separator}}
				{{/each}}
			{{/each}}
		WHERE
			<![CDATA[
			{{sqlExpr}}
			]]>
	</select>

	<select id="listIf{{upperName}}Content" resultType="{{../className}}Content">
		SELECT
			{{#each ../properties}}
			T1.{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{../tableName}} T1
			{{#each joins}}
			LEFT JOIN {{nextClass.tableName}} T{{nextNo}} ON
				{{#each lastField.refKeyFields}}
				T{{../lastNo}}.{{columnName}} = T{{../nextNo}}.{{refKeyColumnName}}{{#separator}} AND {{/separator}}
				{{/each}}
			{{/each}}
		WHERE
			<![CDATA[
			{{sqlExpr}}
			]]>
		<if test="limit &gt; 0">
			LIMIT #{limit}
		<if test="offset &gt;= 0">
			OFFSET #{offset}
		</if>
		</if>
	</select>
	{{/each}}

	{{#if findConditions}}
	<select id="findSummary" resultType="{{className}}Summary">
		SELECT
			{{#each properties}}
			{{#if needsSum}}
			SUM({{columnName}}) AS "sum{{upperName}}",
			{{/if}}
			{{#if needsAvg}}
			AVG({{columnName}}) AS "avg{{upperName}}",
			{{/if}}
			{{#if needsMax}}
			MAX({{columnName}}) AS "max{{upperName}}",
			{{/if}}
			{{#if needsMin}}
			MIN({{columnName}}) AS "min{{upperName}}",
			{{/if}}
			{{/each}}
			COUNT(*) AS "count"
		FROM
			{{tableName}}
		<where>
			{{#each findConditions}}
			<if test="{{fieldName}} != null">
				AND {{columnName}} = #{ {{fieldName}} }
			</if>
			{{/each}}
		</where>
	</select>

	<select id="findContent" resultType="{{className}}Content">
		SELECT
			{{#each properties}}
			{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{tableName}}
		<where>
			{{#each findConditions}}
			<if test="{{fieldName}} != null">
				AND {{columnName}} = #{ {{fieldName}} }
			</if>
			{{/each}}
		</where>
		<if test="limit &gt; 0">
			LIMIT #{limit}
		<if test="offset &gt;= 0">
			OFFSET #{offset}
		</if>
		</if>
	</select>
	{{/if}}

	{{#each refs}}

	<select id="get{{upperName}}" resultType="{{cref.className}}Content">
		SELECT
			{{#each cref.properties}}
			{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{cref.tableName}}
		WHERE
			{{#each refKeyFields}}
			{{refKeyColumnName}} = #{ {{refKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
	</select>
	{{/each}}

	{{#each sets}}

	<select id="list{{upperName}}Summary" resultType="{{fref.owner.className}}Summary">
		SELECT
			{{#each fref.owner.properties}}
			{{#if needsSum}}
			SUM({{columnName}}) AS "sum{{upperName}}",
			{{/if}}
			{{#if needsAvg}}
			AVG({{columnName}}) AS "avg{{upperName}}",
			{{/if}}
			{{#if needsMax}}
			MAX({{columnName}}) AS "max{{upperName}}",
			{{/if}}
			{{#if needsMin}}
			MIN({{columnName}}) AS "min{{upperName}}",
			{{/if}}
			{{/each}}
			COUNT(*) AS "count"
		FROM
			{{fref.owner.tableName}}
		WHERE
			{{#each invKeyFields}}
			{{invKeyColumnName}} = #{ content.{{invKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
	</select>

	<select id="list{{upperName}}Content" resultType="{{fref.owner.className}}Content">
		SELECT
			{{#each fref.owner.properties}}
			{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{fref.owner.tableName}}
		WHERE
			{{#each invKeyFields}}
			{{invKeyColumnName}} = #{ content.{{invKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
		<if test="limit &gt; 0">
			LIMIT #{limit}
		<if test="offset &gt;= 0">
			OFFSET #{offset}
		</if>
		</if>
	</select>

	{{#each fref.owner.queries}}

	<select id="list{{../upperName}}If{{upperName}}Summary" resultType="{{../fref.owner.className}}Summary">
		SELECT
			{{#each ../fref.owner.properties}}
			{{#if needsSum}}
			SUM(T1.{{columnName}}) AS "sum{{upperName}}",
			{{/if}}
			{{#if needsAvg}}
			AVG(T1.{{columnName}}) AS "avg{{upperName}}",
			{{/if}}
			{{#if needsMax}}
			MAX(T1.{{columnName}}) AS "max{{upperName}}",
			{{/if}}
			{{#if needsMin}}
			MIN(T1.{{columnName}}) AS "min{{upperName}}",
			{{/if}}
			{{/each}}
			COUNT(*) AS "count"
		FROM
			{{../fref.owner.tableName}} T1
			{{#each joins}}
			LEFT JOIN {{nextClass.tableName}} T{{nextNo}} ON
				{{#each lastField.refKeyFields}}
				T{{../lastNo}}.{{columnName}} = T{{../nextNo}}.{{refKeyColumnName}}{{#separator}} AND {{/separator}}
				{{/each}}
			{{/each}}
		WHERE
			{{#each ../invKeyFields}}
			T1.{{invKeyColumnName}} = #{ content.{{invKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
			<![CDATA[
			AND {{sqlExpr}}
			]]>
	</select>

	<select id="list{{../upperName}}If{{upperName}}Content" resultType="{{../fref.owner.className}}Content">
		SELECT
			{{#each ../fref.owner.properties}}
			T1.{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{../fref.owner.tableName}} T1
			{{#each joins}}
			LEFT JOIN {{nextClass.tableName}} T{{nextNo}} ON
				{{#each lastField.refKeyFields}}
				T{{../lastNo}}.{{columnName}} = T{{../nextNo}}.{{refKeyColumnName}}{{#separator}} AND {{/separator}}
				{{/each}}
			{{/each}}
		WHERE
			{{#each ../invKeyFields}}
			T1.{{invKeyColumnName}} = #{ content.{{invKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
			<![CDATA[
			AND {{sqlExpr}}
			]]>
		<if test="limit &gt; 0">
			LIMIT #{limit}
		<if test="offset &gt;= 0">
			OFFSET #{offset}
		</if>
		</if>
	</select>
	{{/each}}

	{{#if fref.owner.findConditions}}
	<select id="find{{upperName}}Summary" resultType="{{fref.owner.className}}Summary">
		SELECT
			{{#each fref.owner.properties}}
			{{#if needsSum}}
			SUM({{columnName}}) AS "sum{{upperName}}",
			{{/if}}
			{{#if needsAvg}}
			AVG({{columnName}}) AS "avg{{upperName}}",
			{{/if}}
			{{#if needsMax}}
			MAX({{columnName}}) AS "max{{upperName}}",
			{{/if}}
			{{#if needsMin}}
			MIN({{columnName}}) AS "min{{upperName}}",
			{{/if}}
			{{/each}}
			COUNT(*) AS "count"
		FROM
			{{fref.owner.tableName}}
		WHERE
			{{#each invKeyFields}}
			{{invKeyColumnName}} = #{ content.{{invKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
			{{#each fref.owner.findConditions}}
			<if test="{{fieldName}} != null">
				AND {{columnName}} = #{ {{fieldName}} }
			</if>
			{{/each}}
	</select>

	<select id="find{{upperName}}Content" resultType="{{fref.owner.className}}Content">
		SELECT
			{{#each fref.owner.properties}}
			{{columnName}} AS "{{fieldName}}"{{#separator}},{{/separator}}
			{{/each}}
		FROM
			{{fref.owner.tableName}}
		WHERE
			{{#each invKeyFields}}
			{{invKeyColumnName}} = #{ content.{{invKeyFieldName}} }{{#separator}} AND {{/separator}}
			{{/each}}
			{{#each fref.owner.findConditions}}
			<if test="{{fieldName}} != null">
				AND {{columnName}} = #{ {{fieldName}} }
			</if>
			{{/each}}
		<if test="limit &gt; 0">
			LIMIT #{limit}
		<if test="offset &gt;= 0">
			OFFSET #{offset}
		</if>
		</if>
	</select>
	{{/if}}
	{{/each}}

</mapper>
{{/java}}
{{/each}}
