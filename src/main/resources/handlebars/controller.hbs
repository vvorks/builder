//
// Controlerテンプレート
//
{{#java this "server/controller/" upperLastName "RpcController" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import {{global.project.projectName}}.common.lang.Strings;
import {{global.project.projectName}}.server.common.net.annotation.JsonRpcController;
import {{global.project.projectName}}.server.common.net.annotation.JsonRpcMethod;
import {{global.project.projectName}}.server.common.net.annotation.JsonRpcParam;
{{#each classesByName}}
import {{global.project.projectName}}.server.domain.{{className}}Content;
import {{global.project.projectName}}.server.domain.{{className}}Subject;
import {{global.project.projectName}}.server.domain.{{className}}Summary;
{{/each}}
{{#each enumsByName}}
import {{global.project.projectName}}.server.domain.{{enumName}};
import {{global.project.projectName}}.server.domain.{{enumName}}Subject;
import {{global.project.projectName}}.server.domain.{{enumName}}Summary;
{{/each}}
{{#each classesByName}}
import {{global.project.projectName}}.server.mapper.{{className}}Mapper;
{{/each}}

/**
 * {{titleOrName}}の Json-Rpc (on Websocket) API
 */
@JsonRpcController("/{{lastName}}")
public class {{upperLastName}}RpcController {

	{{#each classes}}

	/** {{titleOrName}}のMapper */
	@Autowired
	private {{className}}Mapper {{lowerName}}Mapper;
	{{/each}}

	{{#each classes}}

	/**
	 * {{titleOrName}}を挿入する
	 *
	 * @param content 挿入する{{titleOrName}}
	 * @return 処理成功の場合、真
	 */
	@JsonRpcMethod
	public boolean insert{{className}}({{className}}Content content) {
		return {{lowerName}}Mapper.insert(content);
	}

	/**
	 * {{titleOrName}}を更新する
	 *
	 * @param content 更新する{{titleOrName}}
	 * @return 処理成功の場合、真
	 */
	@JsonRpcMethod
	public boolean update{{className}}({{className}}Content content) {
		return {{lowerName}}Mapper.update(content);
	}

	/**
	 * {{titleOrName}}を削除する
	 *
	 * @param content 削除する{{titleOrName}}
	 * @return 処理成功の場合、真
	 */
	@JsonRpcMethod
	public boolean delete{{className}}({{className}}Content content) {
		return {{lowerName}}Mapper.delete(content);
	}

	/**
	 * {{titleOrName}}を取得する
	 *
	{{#each keys}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @return 取得した{{titleOrName}}
	 */
	@JsonRpcMethod
	public {{className}}Content get{{className}}(
		{{#each keys}}
		@JsonRpcParam("{{fieldName}}") {{javaType}} {{fieldName}}{{#separator}}, {{/separator}}
		{{/each}}
	) {
		return {{lowerName}}Mapper.get(
				{{#each keys}}
				{{fieldName}}{{#separator}}, {{/separator}}
				{{/each}}
				);
	}

	/**
	 * 全ての{{titleOrName}}情報を取得する
	 *
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{titleOrName}}情報
	 */
	@JsonRpcMethod
	public {{className}}Summary<{{className}}Content> list{{className}}(
		@JsonRpcParam("offset") int offset,
		@JsonRpcParam("limit") int limit
	) {
		{{className}}Summary<{{className}}Content> summary = {{lowerName}}Mapper.listSummary();
		if (offset < 0) {
			offset = summary.getFocus();
		}
		summary.setOffset(offset);
		List<{{className}}Content> contents = {{lowerName}}Mapper.listContent(offset, limit);
		summary.setContents(contents);
		return summary;
	}

	{{#each queries}}

	/**
	 * {{titleOrName}}に合致する{{../titleOrName}}情報を取得する
	 *
	{{#each arguments}}
	 * @param {{fieldName}} {{titleOrName}}
	{{/each}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{../titleOrName}}情報
	 */
	@JsonRpcMethod
	public {{../className}}Summary<{{../className}}Content> list{{../className}}If{{upperName}}(
		{{#each arguments}}
		@JsonRpcParam("{{fieldName}}") {{javaType}} {{fieldName}},
		{{/each}}
		@JsonRpcParam("offset") int offset,
		@JsonRpcParam("limit") int limit
	) {
		{{../className}}Summary<{{../className}}Content> summary = {{../lowerName}}Mapper.listSummaryIf{{upperName}}(
				{{#each arguments}}
				{{fieldName}}{{#separator}},{{/separator}}
				{{/each}}
				);
		if (offset < 0) {
			offset = summary.getFocus();
		}
		summary.setOffset(offset);
		List<{{../className}}Content> contents = {{../lowerName}}Mapper.listContentIf{{upperName}}(
				{{#each arguments}}
				{{fieldName}},
				{{/each}}
				offset, limit);
		summary.setContents(contents);
		return summary;
	}
	{{/each}}

	{{#each refs}}

	/**
	 * {{titleOrName}}を取得する
	 *
	 * @param content {{../titleOrName}}
	 * @return {{titleOrName}}
	 */
	@JsonRpcMethod
	public {{cref.className}}Content get{{../className}}{{upperName}}(
		@JsonRpcParam("content") {{../className}}Content content
	) {
		return {{../lowerName}}Mapper.get{{upperName}}(content);
	}

	/**
	 * {{titleOrName}}の候補一覧を取得する
	 *
	 * @param content {{../titleOrName}}
	 * @return {{titleOrName}}の候補一覧
	 */
	@JsonRpcMethod
	public {{cref.className}}Summary<{{cref.className}}Subject> list{{../className}}{{upperName}}Candidate(
		@JsonRpcParam("content") {{../className}}Content content,
		@JsonRpcParam("hint") String hint,
		@JsonRpcParam("offset") int offset,
		@JsonRpcParam("limit") int limit
	) {
		{{cref.className}}Summary<{{cref.className}}Subject> summary = {{../lowerName}}Mapper.list{{upperName}}CandidateSummary(
				content, hint);
		if (offset < 0) {
			offset = summary.getFocus();
		}
		summary.setOffset(offset);
		List<{{cref.className}}Subject> contents = {{../lowerName}}Mapper.list{{upperName}}CandidateSubject(
				content, hint,
				offset, limit);
		summary.setContents(contents);
		return summary;
	}
	{{/each}}

	{{#each enums}}

	/**
	 * {{titleOrName}}の候補一覧を取得する
	 *
	 * @param content {{../titleOrName}}
	 * @return {{titleOrName}}の候補一覧
	 */
	@JsonRpcMethod
	public {{eref.enumName}}Summary<{{eref.enumName}}Subject> list{{../className}}{{upperName}}Candidate(
		@JsonRpcParam("content") {{../className}}Content content,
		@JsonRpcParam("hint") String hint,
		@JsonRpcParam("offset") int offset,
		@JsonRpcParam("limit") int limit
	) {
		int count;
		if (Strings.isEmpty(hint)) {
			count = {{eref.enumName}}.values().length;
		} else {
			count = 0;
			for ({{eref.enumName}} e : {{eref.enumName}}.values()) {
				if (fuzzyMatch(e.get_title(), hint)) {
					count++;
				}
			}
		}
		offset = Math.min(Math.max(0, offset), count);
		{{eref.enumName}}Summary<{{eref.enumName}}Subject> summary = new {{eref.enumName}}Summary<>();
		summary.setCount(count);
		summary.setFocus(0);
		summary.setOffset(offset);
		if (count == 0) {
			summary.setContents(Collections.emptyList());
		} else {
			List<{{eref.enumName}}Subject> contents = new ArrayList<>();
			for ({{eref.enumName}} e : {{eref.enumName}}.values()) {
				if (Strings.isEmpty(hint) || fuzzyMatch(e.get_title(), hint)) {
					if (offset > 0) {
						offset--;
					} else if (limit > 0) {
						contents.add(new {{eref.enumName}}Subject(e));
						limit--;
						if (limit == 0) {
							break;
						}
					}
				}
			}
			summary.setContents(contents);
		}
		return summary;
	}
	{{/each}}

	{{#each sets}}

	/**
	 * {{titleOrName}}情報を取得する
	 *
	 * @param content {{../titleOrName}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{titleOrName}}情報
	 */
	@JsonRpcMethod
	public {{fref.owner.className}}Summary<{{fref.owner.className}}Content> list{{../className}}{{upperName}}(
		@JsonRpcParam("content") {{../className}}Content content,
		@JsonRpcParam("offset") int offset,
		@JsonRpcParam("limit") int limit
	) {
		{{fref.owner.className}}Summary<{{fref.owner.className}}Content> summary = {{../lowerName}}Mapper.list{{upperName}}Summary(content);
		if (offset < 0) {
			offset = summary.getFocus();
		}
		summary.setOffset(offset);
		List<{{fref.owner.className}}Content> contents =
				{{../lowerName}}Mapper.list{{upperName}}Content(content, offset, limit);
		summary.setContents(contents);
		return summary;
	}

	{{#each fref.owner.queries}}

	/**
	 * {{titleOrName}}に合致する{{../titleOrName}}情報を取得する
	 *
	 * @param content {{../../titleOrName}}
	 * @param offset 取得開始位置（全件取得の場合は無効）
	 * @param limit 件数（０または負値を指定した場合には全件）
	 * @return {{../titleOrName}}情報
	 */
	@JsonRpcMethod
	public {{../fref.owner.className}}Summary<{{fref.owner.className}}Content> list{{../../className}}{{../upperName}}If{{upperName}}(
		@JsonRpcParam("content") {{../../className}}Content content,
		{{#each arguments}}
		@JsonRpcParam("{{fieldName}}") {{javaType}} {{fieldName}},
		{{/each}}
		@JsonRpcParam("offset") int offset,
		@JsonRpcParam("limit") int limit
	) {
		{{../fref.owner.className}}Summary<{{fref.owner.className}}Content> summary = {{../../lowerName}}Mapper.list{{../upperName}}SummaryIf{{upperName}}(
				content,
				{{#each arguments}}
				{{fieldName}}{{#separator}},{{/separator}}
				{{/each}}
				);
		if (offset < 0) {
			offset = summary.getFocus();
		}
		summary.setOffset(offset);
		List<{{fref.owner.className}}Content> contents = {{../../lowerName}}Mapper.list{{../upperName}}ContentIf{{upperName}}(
				content,
				{{#each arguments}}
				{{fieldName}},
				{{/each}}
				offset, limit);
		summary.setContents(contents);
		return summary;
	}
	{{/each}}

	{{/each}}

	{{/each}}

	/**
	 * 文字列部分比較関数
	 */
	protected boolean fuzzyMatch(String text, String part) {
		//TODO 全角半角同一視、（ひらがな、カタカナも）。但し、SQL側ロジックと合わせる事
		return text.toLowerCase().indexOf(part.toLowerCase()) >= 0;
	}

}
{{/java}}
