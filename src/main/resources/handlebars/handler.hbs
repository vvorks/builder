//
// Enum用タイプハンドラ
//
{{#each this.enums}}
{{#java this "server/handler/" enumName "TypeHandler" ".java"}}
{{#if global.project.copyrightLines}}
/*
{{#each global.project.copyrightLines}}
 * {{this}}
{{/each}}
 */
{{/if}}
package {{global.project.projectName}}.server.handler;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.ibatis.type.BaseTypeHandler;
import org.apache.ibatis.type.JdbcType;

import {{global.project.projectName}}.server.domain.{{enumName}};

{{#if title}}
/**
 * {{title}}のタイプハンドラ
 */
{{/if}}
public class {{enumName}}TypeHandler extends BaseTypeHandler<{{enumName}}> {

	@Override
	public void setNonNullParameter(PreparedStatement ps, int index, {{enumName}} parameter, JdbcType jdbcType) throws SQLException {
		{{#if encodeString}}
		ps.setString(index, parameter.name());
		{{else}}
		ps.setInt(index, parameter.code());
		{{/if}}
	}

	@Override
	public {{enumName}} getNullableResult(ResultSet rs, String columnName) throws SQLException {
		return getNullableResult(rs, rs.findColumn(columnName));
	}

	@Override
	public {{enumName}} getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
		{{#if encodeString}}
		return {{enumName}}.valueOf(rs.getString(columnIndex));
		{{else}}
		return {{enumName}}.valueOf(rs.getInt(columnIndex));
		{{/if}}
	}

	@Override
	public {{enumName}} getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
		{{#if encodeString}}
		return {{enumName}}.valueOf(cs.getString(columnIndex));
		{{else}}
		return {{enumName}}.valueOf(cs.getInt(columnIndex));
		{{/if}}
	}

}
{{/java}}
{{/each}}
