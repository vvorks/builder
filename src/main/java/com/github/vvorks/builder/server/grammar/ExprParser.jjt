/**
 * SETTINGS
 */
options {
	/* jjtree options */
	NODE_CLASS = "com.github.vvorks.builder.server.grammar.ExprNode";
	TRACK_TOKENS = true;
	MULTI = true;
	VISITOR = true;
	VISITOR_DATA_TYPE = "com.github.vvorks.builder.server.expression.Expression";
	VISITOR_RETURN_TYPE = "com.github.vvorks.builder.server.expression.Expression";
	VISITOR_EXCEPTION = "ParseException";
	/* javacc options */
	DEBUG_PARSER = false;
	JAVA_UNICODE_ESCAPE = true;
	STATIC = false;
	TOKEN_FACTORY = "ExprParser";
}

/*
 * JAVA CODE BLOCK
 */
PARSER_BEGIN(ExprParser)
package com.github.vvorks.builder.server.grammar;
import java.io.StringReader;
import org.springframework.stereotype.Component;

@SuppressWarnings("all")
@Component
public class ExprParser {

	public static final int CODE_TYPE_SELECT = 0;

	public static final int CODE_TYPE_WHERE = 1;

	public static final int CODE_TYPE_ORDER = 2;

	public static final Token newToken(int ofKind, String tokenImage) {
		return new ExprToken(ofKind, tokenImage);
	}

	public ExprParser() {
		this(System.in);
	}

	public ExprNode parse(String code, int codeType) throws ParseException {
		this.ReInit(new StringReader(code));
		switch (codeType) {
		case CODE_TYPE_SELECT:
			return this.SelectExpression();
		case CODE_TYPE_WHERE:
			return this.WhereExpression();
		case CODE_TYPE_ORDER:
			return this.OrderExpressions();
		default:
			throw new IllegalArgumentException();
		}
	}

	private boolean matchAfterRepeat(int rept, int term) {
		int k = 0;
		for (int i = 1; (k = getToken(i).kind) == rept; i++);
		return k == term;
	}

}

PARSER_END(ExprParser)

/*
 * LEX BLOCK
 */

/* white space */
SKIP : {
	" " | "\t" | "\n" | "\r" | "\f"
}

/* comments */
MORE : {
	<"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT |
	"/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN : {
	<SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN : {
	<FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE : {
  < ~[] >
}

/* literals */
TOKEN : {
	<INTEGER_LITERAL:
		<DECIMAL_LITERAL> (["l","L","n","N"])? |
		<HEX_LITERAL> (["l","L"])? |
		<OCTAL_LITERAL> (["l","L"])?
	> |
	<#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
	<#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > |
	<#OCTAL_LITERAL: "0" (["0"-"7"])* > |
	<FLOATING_POINT_LITERAL:
		<DECIMAL_FLOATING_POINT_LITERAL> |	<HEXADECIMAL_FLOATING_POINT_LITERAL>
	> |
	<#DECIMAL_FLOATING_POINT_LITERAL:
		(["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D","n","N"])? |
		"." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D","n","N"])? |
		(["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D","n","N"])? |
		(["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D","n","N"]
	> |
	<#DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
	<#HEXADECIMAL_FLOATING_POINT_LITERAL:
		"0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D","n","N"])? |
		"0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D","n","N"])?
	> |
	<#HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ > |
	<SINGLE_STRING_LITERAL:
		"'"
		(
			(~["'","\\","\n","\r"]) |
			(
				"\\"
				(
					["n","t","b","r","f","\\","'","\""] |
					["0"-"7"] ( ["0"-"7"] )? |
					["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			)
		)*
		"'" (["t","T"])?
	> |
	<DOUBLE_STRING_LITERAL:
		"\""
		(
			(~["\"","\\","\n","\r"]) |
			(
				"\\"
				(
 					["n","t","b","r","f","\\","'","\""] |
 					["0"-"7"] ( ["0"-"7"] )? |
 					["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			)
		)*
		"\""
	>
}

/* reserved words */
TOKEN : {
	<NULL: "null" > |
	<TRUE: "true" > | <FALSE: "false" > |
	<THIS: "this" > |
	<AND: "and"> | <OR: "or"> | <XOR: "xor"> | <NOT: "not"> |
	<IF:"if"> | <THEN:"then"> | <ELSEIF:"elseif"> | <ELSE:"else"> | <ENDIF: "endif">
}

/* identifiers */
TOKEN : {
	< IDENTIFIER: <LETTER> (<PART_LETTER>)* > |
	< #LETTER: ["A"-"Z", "_", "a"-"z"]> |
	< #PART_LETTER: ["0"-"9", "A"-"Z", "_", "a"-"z"] >
}

/* separators */
TOKEN : {
	< LPAREN: "(" >		| < RPAREN: ")" >	|
	< LBRACE: "{" >		| < RBRACE: "}" >	|
	< LBRACKET: "[" >	| < RBRACKET: "]" >	|
	< SEMICOLON: ";" >	| < COMMA: "," >	|
	< DOT: "." >		| < AT: "@" >
}

/* operators */
TOKEN : {
	< DOLLER: "$" >		|
	< HOOK: "?" >		| < COLON: ":" >	| < ASSIGN: "=" >	|
	< BANG: "!" >		| < TILDE: "~" >	|
	< EQ: "==" >		| < NE: "!=" >		| < LTGT: "<>" >	|
	< LIKE: "=%" >		| < MATCH: "=~" >	|
	< LT: "<" >			| < LE: "<=" >		| < GT: ">" >		| < GE: ">=" >		|
	< SC_OR: "||" >		| < SC_AND: "&&" >	|
	< PLUS: "+" >		| < MINUS: "-" >	| < STAR: "*" >		| < SLASH: "/" >	|
	< BIT_AND: "&" >	| < BIT_OR: "|" >	| < BIT_XOR: "^" >	| < REM: "%" >		|
	< TO: "..">			| < ELLIPSIS: "..." >
}

/*
 * PARSER BLOCK(Expression)
 */
ExprNode SelectExpression(): {} {
	Expression()
	<EOF>
	{
		return jjtThis;
	}
}

ExprNode WhereExpression(): {} {
	Expression()
	<EOF>
	{
		return jjtThis;
	}
}

ExprNode OrderExpressions(): {} {
	OrderExpression()
	(
		","
		OrderExpression()
	)*
	<EOF>
	{
		return jjtThis;
	}
}

void OrderExpression(): {} {
	[OrderOperator()] Expression()
}

void OrderOperator() #UnaryOperator : {} {
	"<" | ">"
}

void Expression() #void: {} {
	OrExpression()
}

void OrExpression() #BinaryExpression(>1) : {} {
	AndExpression() ( OrOperator() AndExpression() )*
}

void OrOperator() #BinaryOperator : {} {
	<OR> | "||"
}

void AndExpression() #BinaryExpression(>1) : {} {
	XorExpression() ( AndOperator() XorExpression() )*
}

void AndOperator() #BinaryOperator : {} {
	<AND> | "&&"
}

void XorExpression() #BinaryExpression(>1) : {} {
	EqualityExpression() ( XorOperator() EqualityExpression() )*
}

void XorOperator() #BinaryOperator : {} {
	<XOR> | "^"
}

void EqualityExpression() #BinaryExpression(>1) : {} {
	RelationalExpression() ( EqualityOperator() RelationalExpression() )*
}

void EqualityOperator() #BinaryOperator : {} {
	"==" | "!=" | "<>" | "=%" | "=~"
}

void RelationalExpression() #BinaryExpression(>1) : {} {
	AdditiveExpression() ( RelationalOperator() AdditiveExpression() )*
}

void RelationalOperator() #BinaryOperator : {} {
	"<" | ">" | "<=" | ">="
}

void AdditiveExpression() #BinaryExpression(>1) : {} {
	MultiplicativeExpression() ( AdditiveOperator() MultiplicativeExpression() )*
}

void AdditiveOperator() #BinaryOperator : {} {
	"+" | "-"
}

void MultiplicativeExpression() #BinaryExpression(>1) : {} {
	UnaryExpression() ( MultiplicativeOperator() UnaryExpression() )*
}

void MultiplicativeOperator() #BinaryOperator : {} {
	"*" | "/" | "%"
}

void UnaryExpression() #UnaryExpression(>1) : {} {
	( SignOperator() ) UnaryExpression() |
	UnaryExpressionNotPlusMinus()
}

void SignOperator() #UnaryOperator : {} {
	"+" | "-"
}

void UnaryExpressionNotPlusMinus() #UnaryExpression(>1) : {} {
	( UnaryOperator() ) UnaryExpression() |
	PrimaryExpression()
}

void UnaryOperator() #UnaryOperator : {} {
	<NOT> | "!" | "~"
}

void PrimaryExpression() : {} {
	PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() #void : {} {
	Literal() |
	ParenExpression() |
	IfExpression() |
	BlockExpression() |
	LOOKAHEAD(2) Invocation() |
	Argument() |
	Property()
}

void PrimarySuffix() #void : {} {
	ArrayAccess() |
	"." (
		LOOKAHEAD(2) Invocation() |
		Property()
	)
}

void ParenExpression(): {} {
	"(" Expression() ")"
}

void IfExpression(): {} {
	"if" Expression() "then" Expression()
	( "elseif" Expression() "then" Expression() )*
	[ "else" Expression() ]
	"endif"
}

void BlockExpression(): {} {
	"{"
		(";")*
		Expression()
		(
			LOOKAHEAD({!matchAfterRepeat(SEMICOLON, RBRACE)})
			(";")+
			Expression()
		)*
		(";")*
	"}"
}

void Argument(): {} {
	"$" <IDENTIFIER>
}

void Property(): {} {
	<IDENTIFIER>
}

void Invocation(): {} {
	<IDENTIFIER> "("
	[ Expression() ( "," Expression() )* ]
	")"
}

void ArrayAccess(): {} {
	"[" Expression() "]"
}

void Literal() #void : {} {
	IntLiteral() |
	RealLiteral() |
	StringLiteral() |
	BooleanLiteral() |
	NullLiteral()
}

void IntLiteral(): {} {
	<INTEGER_LITERAL>
}

void RealLiteral(): {} {
	<FLOATING_POINT_LITERAL>
}

void StringLiteral(): {} {
	<SINGLE_STRING_LITERAL> | <DOUBLE_STRING_LITERAL>
}

void BooleanLiteral(): {} {
	"true" | "false"
}

void NullLiteral(): {} {
	"null"
}

